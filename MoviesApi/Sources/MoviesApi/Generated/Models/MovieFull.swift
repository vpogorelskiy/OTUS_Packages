//
// MovieFull.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MovieFull: Codable, Hashable {

    public var title: String
    public var year: String?
    public var rated: String?
    public var released: String?
    public var runtime: String?
    public var genre: String?
    public var director: String?
    public var writer: String?
    public var actors: String?
    public var plot: String?
    public var language: String?
    public var country: String?
    public var awards: String?
    public var poster: String?
    public var ratings: [MovieRating]?
    public var metascore: String?
    public var imdbRating: String?
    public var imdbVotes: String?
    public var imdbID: String
    public var type: String?
    public var DVD: String?
    public var boxOffice: String?
    public var production: String?
    public var website: String?
    public var response: String?

    public init(title: String, year: String? = nil, rated: String? = nil, released: String? = nil, runtime: String? = nil, genre: String? = nil, director: String? = nil, writer: String? = nil, actors: String? = nil, plot: String? = nil, language: String? = nil, country: String? = nil, awards: String? = nil, poster: String? = nil, ratings: [MovieRating]? = nil, metascore: String? = nil, imdbRating: String? = nil, imdbVotes: String? = nil, imdbID: String, type: String? = nil, DVD: String? = nil, boxOffice: String? = nil, production: String? = nil, website: String? = nil, response: String? = nil) {
        self.title = title
        self.year = year
        self.rated = rated
        self.released = released
        self.runtime = runtime
        self.genre = genre
        self.director = director
        self.writer = writer
        self.actors = actors
        self.plot = plot
        self.language = language
        self.country = country
        self.awards = awards
        self.poster = poster
        self.ratings = ratings
        self.metascore = metascore
        self.imdbRating = imdbRating
        self.imdbVotes = imdbVotes
        self.imdbID = imdbID
        self.type = type
        self.DVD = DVD
        self.boxOffice = boxOffice
        self.production = production
        self.website = website
        self.response = response
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title = "Title"
        case year = "Year"
        case rated = "Rated"
        case released = "Released"
        case runtime = "Runtime"
        case genre = "Genre"
        case director = "Director"
        case writer = "Writer"
        case actors = "Actors"
        case plot = "Plot"
        case language = "Language"
        case country = "Country"
        case awards = "Awards"
        case poster = "Poster"
        case ratings = "Ratings"
        case metascore = "Metascore"
        case imdbRating
        case imdbVotes
        case imdbID
        case type = "Type"
        case DVD
        case boxOffice = "BoxOffice"
        case production = "Production"
        case website = "Website"
        case response = "Response"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(title, forKey: .title)
        try container.encodeIfPresent(year, forKey: .year)
        try container.encodeIfPresent(rated, forKey: .rated)
        try container.encodeIfPresent(released, forKey: .released)
        try container.encodeIfPresent(runtime, forKey: .runtime)
        try container.encodeIfPresent(genre, forKey: .genre)
        try container.encodeIfPresent(director, forKey: .director)
        try container.encodeIfPresent(writer, forKey: .writer)
        try container.encodeIfPresent(actors, forKey: .actors)
        try container.encodeIfPresent(plot, forKey: .plot)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(awards, forKey: .awards)
        try container.encodeIfPresent(poster, forKey: .poster)
        try container.encodeIfPresent(ratings, forKey: .ratings)
        try container.encodeIfPresent(metascore, forKey: .metascore)
        try container.encodeIfPresent(imdbRating, forKey: .imdbRating)
        try container.encodeIfPresent(imdbVotes, forKey: .imdbVotes)
        try container.encode(imdbID, forKey: .imdbID)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(DVD, forKey: .DVD)
        try container.encodeIfPresent(boxOffice, forKey: .boxOffice)
        try container.encodeIfPresent(production, forKey: .production)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(response, forKey: .response)
    }
}

